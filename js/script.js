// –§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–º—ñ—à—É–≤–∞–Ω–Ω—è –º–∞—Å–∏–≤—É (–§—ñ—à–µ—Ä–∞‚Äì–Ñ–π—Ç—Å–∞)
function shuffleArray(array) {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]];
  }
  return array;
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
let allWords = shuffleArray([...WORDS_A1]);
let currentSet = [];
let currentSetSize = 10;
let currentWordIndex = 0;
let correctAnswers = 0;
let wrongAnswers = 0;
let wordVisible = true; // ‚úÖ —Å–ø–æ—á–∞—Ç–∫—É –ø–æ–∫–∞–∑—É—î–º–æ —Å–ª–æ–≤–æ
let roundCorrect = 0;
let roundWrong = 0;

// DOM –µ–ª–µ–º–µ–Ω—Ç–∏
const wordElement = document.getElementById("word");
const optionsElement = document.getElementById("options");
const scoreElement = document.getElementById("score");
const resultElement = document.getElementById("result");
const restartButton = document.getElementById("restart");
const showWordCheckbox = document.getElementById("showWordCheckbox");
const listenButton = document.getElementById("listenButton");
const autoSpeakCheckbox = document.getElementById("autoSpeakCheckbox");

// –û–∑–≤—É—á–µ–Ω–Ω—è
function speakWord(text) {
  if ("speechSynthesis" in window) {
    const utterance = new SpeechSynthesisUtterance(text);
    utterance.lang = "en-US";
    window.speechSynthesis.cancel();
    window.speechSynthesis.speak(utterance);
  }
}

// –ü–æ—á–∞—Ç–∏ –Ω–æ–≤–∏–π —Ä–∞—É–Ω–¥
function startRound() {
  currentSet = allWords.slice(0, currentSetSize);
  currentSet = shuffleArray(currentSet);
  currentWordIndex = 0;
  roundCorrect = 0;
  roundWrong = 0;
  showWord();
}

// –ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ª–æ–≤–æ
function showWord() {
  if (currentWordIndex >= currentSet.length) {
    endRound();
    return;
  }

  const currentWord = currentSet[currentWordIndex];
  wordElement.textContent = wordVisible ? currentWord.en : "*******";

  if (autoSpeakCheckbox.checked) {
    speakWord(currentWord.en);
  }

  // –í–∞—Ä—ñ–∞–Ω—Ç–∏
  let options = [currentWord.uk];
  let usedIndexes = new Set([allWords.indexOf(currentWord)]);
  while (options.length < 4) {
    const idx = Math.floor(Math.random() * allWords.length);
    if (!usedIndexes.has(idx)) {
      options.push(allWords[idx].uk);
      usedIndexes.add(idx);
    }
  }

  options = shuffleArray(options);

  // –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤
  optionsElement.innerHTML = "";
  options.forEach(option => {
    const button = document.createElement("button");
    button.textContent = option;
    button.classList.add("option-btn");
    button.addEventListener("click", () => checkAnswer(option, currentWord.uk, button));
    optionsElement.appendChild(button);
  });
}

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
function checkAnswer(selected, correct, button) {
  const optionButtons = document.querySelectorAll(".option-btn");

  if (selected === correct) {
    button.classList.add("correct");
    correctAnswers++;
    roundCorrect++;
  } else {
    button.classList.add("wrong");
    wrongAnswers++;
    roundWrong++;
    optionButtons.forEach(btn => {
      if (btn.textContent === correct) btn.classList.add("correct");
    });
  }

  scoreElement.textContent = `–ü—Ä–∞–≤–∏–ª—å–Ω–∏—Ö: ${correctAnswers} | –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö: ${wrongAnswers}`;
  currentWordIndex++;
  setTimeout(showWord, 1000);
}

// –ö—ñ–Ω–µ—Ü—å —Ä–∞—É–Ω–¥—É
function endRound() {
  if (roundWrong === 0) {
    currentSetSize++; // —è–∫—â–æ –≤—Å—ñ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ ‚Üí –¥–æ–¥–∞—î–º–æ 1 —Å–ª–æ–≤–æ
    resultElement.textContent = `‚úÖ –£—Å—ñ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ! –î–æ–¥–∞—î–º–æ +1 —Å–ª–æ–≤–æ (${currentSetSize})`;
  } else {
    resultElement.textContent = `üîÅ –Ñ –ø–æ–º–∏–ª–∫–∏ (${roundWrong}). –ü–æ–≤—Ç–æ—Ä—é—î–º–æ —Ç—ñ –∂ ${currentSetSize} —Å–ª—ñ–≤.`;
  }

  setTimeout(startRound, 2000);
}

// –ö—ñ–Ω–µ—Ü—å –≥—Ä–∏ (—è–∫—â–æ –∑–∞–∫—ñ–Ω—á–∏–ª–∏ –≤—Å—ñ —Å–ª–æ–≤–∞)
function endGame() {
  wordElement.textContent = "–ì—Ä—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ!";
  optionsElement.innerHTML = "";
  resultElement.textContent = `–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${correctAnswers} –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö, ${wrongAnswers} –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö.`;
}

// –ì–∞–ª–æ—á–∫–∞ ‚Äú–ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ª–æ–≤–æ‚Äù
showWordCheckbox.addEventListener("change", () => {
  wordVisible = showWordCheckbox.checked;
  const currentWord = currentSet[currentWordIndex];
  if (currentWord) {
    wordElement.textContent = wordVisible ? currentWord.en : "*******";
  }
});

// –ö–Ω–æ–ø–∫–∞ ‚Äú–°–ª—É—Ö–∞—Ç–∏‚Äù
listenButton.addEventListener("click", () => {
  const currentWord = currentSet[currentWordIndex];
  if (currentWord) speakWord(currentWord.en);
});

// –ö–Ω–æ–ø–∫–∞ ‚Äú–ì—Ä–∞—Ç–∏ –∑–Ω–æ–≤—É‚Äù
restartButton.addEventListener("click", () => {
  allWords = shuffleArray([...WORDS_A1]);
  currentSetSize = 10;
  correctAnswers = 0;
  wrongAnswers = 0;
  resultElement.textContent = "";
  scoreElement.textContent = "";
  startRound();
});

// ‚úÖ –ü—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –≥–∞–ª–æ—á–∫–∞ –≤–∂–µ —Å—Ç–æ—ó—Ç—å
showWordCheckbox.checked = true;
wordVisible = true;

// –°—Ç–∞—Ä—Ç
startRound();
